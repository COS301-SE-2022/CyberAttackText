"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const devkit_1 = require("@nrwl/devkit");
const get_mf_projects_1 = require("../../utils/get-mf-projects");
function renameMfeConfigToModuleFederation(tree) {
    const mfProjects = (0, get_mf_projects_1.getMFProjects)(tree);
    for (const project of mfProjects) {
        const { root, sourceRoot } = (0, devkit_1.readProjectConfiguration)(tree, project);
        const pathToOldConfig = (0, devkit_1.joinPathFragments)(root, 'mfe.config.js');
        const pathToOldManifest = (0, devkit_1.joinPathFragments)(sourceRoot, 'assets/', 'mfe.manifest.json');
        const pathToMain = (0, devkit_1.joinPathFragments)(sourceRoot, 'main.ts');
        if (tree.exists(pathToOldConfig)) {
            tree.rename(pathToOldConfig, (0, devkit_1.joinPathFragments)(root, 'module-federation.config.js'));
        }
        if (tree.exists(pathToOldManifest)) {
            tree.rename(pathToOldManifest, (0, devkit_1.joinPathFragments)(sourceRoot, 'assets/', 'module-federation.config.json'));
        }
        if (tree.exists(pathToMain) &&
            tree.read(pathToMain, 'utf-8').includes('mfe.manifest.json')) {
            tree.write(pathToMain, tree
                .read(pathToMain, 'utf-8')
                .replace('mfe.manifest', 'module-federation.manifest'));
        }
    }
}
exports.default = renameMfeConfigToModuleFederation;
//# sourceMappingURL=rename-mf-config.js.map