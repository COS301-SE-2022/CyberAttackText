"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const application_1 = require("../application/application");
const remote_1 = require("../remote/remote");
const project_1 = require("../utils/project");
const ts = require("typescript");
const ast_utils_1 = require("../../utils/nx-devkit/ast-utils");
const standalone_utils_1 = require("../../utils/nx-devkit/standalone-utils");
const setup_mf_1 = require("../setup-mf/setup-mf");
function host(tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const projects = (0, devkit_1.getProjects)(tree);
        const remotesToGenerate = [];
        const remotesToIntegrate = [];
        if (options.remotes && options.remotes.length > 0) {
            options.remotes.forEach((remote) => {
                if (!projects.has(remote)) {
                    remotesToGenerate.push(remote);
                }
                else {
                    remotesToIntegrate.push(remote);
                }
            });
        }
        const appName = (0, project_1.normalizeProjectName)(options.name, options.directory);
        const installTask = yield (0, application_1.default)(tree, Object.assign(Object.assign({}, options), { routing: true, port: 4200, skipFormat: true }));
        yield (0, setup_mf_1.setupMf)(tree, {
            appName,
            mfType: 'host',
            routing: true,
            port: 4200,
            remotes: remotesToIntegrate !== null && remotesToIntegrate !== void 0 ? remotesToIntegrate : [],
            federationType: options.dynamic ? 'dynamic' : 'static',
            skipPackageJson: options.skipPackageJson,
            skipFormat: true,
            e2eProjectName: `${appName}-e2e`,
        });
        for (const remote of remotesToGenerate) {
            yield (0, remote_1.default)(tree, Object.assign(Object.assign({}, options), { name: remote, host: appName, skipFormat: true, standalone: options.standalone }));
        }
        routeToNxWelcome(tree, options);
        if (!options.skipFormat) {
            yield (0, devkit_1.formatFiles)(tree);
        }
        return installTask;
    });
}
exports.default = host;
function routeToNxWelcome(tree, options) {
    const { sourceRoot } = (0, devkit_1.readProjectConfiguration)(tree, (0, project_1.normalizeProjectName)(options.name, options.directory));
    const remoteRoutes = options.remotes && Array.isArray(options.remotes)
        ? options.remotes.reduce((routes, remote) => `${routes}\n<li><a routerLink='${(0, project_1.normalizeProjectName)(remote, options.directory)}'>${(0, devkit_1.names)(remote).className}</a></li>`, '')
        : '';
    tree.write((0, devkit_1.joinPathFragments)(sourceRoot, 'app/app.component.html'), `<ul class="remote-menu">
<li><a routerLink='/'>Home</a></li>
${remoteRoutes}
</ul>
<router-outlet></router-outlet>
`);
    const pathToHostRootRoutingFile = (0, devkit_1.joinPathFragments)(sourceRoot, options.standalone ? 'bootstrap.ts' : 'app/app.module.ts');
    const hostRootRoutingFile = tree.read(pathToHostRootRoutingFile, 'utf-8');
    if (!hostRootRoutingFile.includes('RouterModule.forRoot(')) {
        return;
    }
    let sourceFile = ts.createSourceFile(pathToHostRootRoutingFile, hostRootRoutingFile, ts.ScriptTarget.Latest, true);
    if (hostRootRoutingFile.includes('@NgModule')) {
        sourceFile = (0, ast_utils_1.addRoute)(tree, pathToHostRootRoutingFile, sourceFile, `{
         path: '', 
         component: NxWelcomeComponent
     }`);
    }
    else {
        (0, standalone_utils_1.addStandaloneRoute)(tree, pathToHostRootRoutingFile, `{
      path: '',
      component: NxWelcomeComponent
    }`);
        tree.write(pathToHostRootRoutingFile, `import { NxWelcomeComponent } from './app/nx-welcome.component';
    ${tree.read(pathToHostRootRoutingFile, 'utf-8')}`);
    }
    (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, 'files'), (0, devkit_1.joinPathFragments)(sourceRoot, 'app'), {
        appName: (0, project_1.normalizeProjectName)(options.name, options.directory),
        tmpl: '',
    });
}
//# sourceMappingURL=host.js.map