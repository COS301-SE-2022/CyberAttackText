"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.exportComponentInEntryPoint = void 0;
const devkit_1 = require("@nrwl/devkit");
const file_info_1 = require("../../utils/file-info");
const entry_point_1 = require("../../utils/entry-point");
const path_1 = require("../../utils/path");
const entry_point_2 = require("./entry-point");
const module_1 = require("./module");
function exportComponentInEntryPoint(tree, schema) {
    if (!schema.export || (schema.skipImport && !schema.standalone)) {
        return;
    }
    const { root, projectType } = (0, devkit_1.readProjectConfiguration)(tree, schema.project);
    if (projectType === 'application') {
        return;
    }
    const { directory, filePath } = (0, file_info_1.getComponentFileInfo)(tree, schema);
    const entryPointPath = (0, entry_point_1.locateLibraryEntryPointFromDirectory)(tree, directory, root, schema.projectSourceRoot);
    if (!entryPointPath) {
        devkit_1.logger.warn(`Unable to determine whether the component should be exported in the library entry point file. ` +
            `The library's entry point file could not be found. Skipping exporting the component in the entry point file.`);
        return;
    }
    if (!schema.standalone) {
        const modulePath = (0, module_1.findModuleFromOptions)(tree, schema, root);
        if (!(0, entry_point_2.shouldExportInEntryPoint)(tree, entryPointPath, modulePath)) {
            return;
        }
    }
    const relativePathFromEntryPoint = (0, path_1.getRelativeImportToFile)(entryPointPath, filePath);
    const updateEntryPointContent = (0, devkit_1.stripIndents) `${tree.read(entryPointPath, 'utf-8')}
    export * from "${relativePathFromEntryPoint}";`;
    tree.write(entryPointPath, updateEntryPointContent);
}
exports.exportComponentInEntryPoint = exportComponentInEntryPoint;
//# sourceMappingURL=component.js.map