"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertComponentToScam = void 0;
const devkit_1 = require("@nrwl/devkit");
const ast_utils_1 = require("@nrwl/workspace/src/utilities/ast-utils");
const typescript_1 = require("typescript");
function convertComponentToScam(tree, componentFileInfo, options) {
    var _a;
    if (!tree.exists(componentFileInfo.filePath)) {
        throw new Error(`Couldn't find component at path ${componentFileInfo.filePath} to add SCAM setup.`);
    }
    const componentNames = (0, devkit_1.names)(options.name);
    const typeNames = (0, devkit_1.names)((_a = options.type) !== null && _a !== void 0 ? _a : 'component');
    const componentClassName = `${componentNames.className}${typeNames.className}`;
    if (options.inlineScam) {
        const currentComponentContents = tree.read(componentFileInfo.filePath, 'utf-8');
        let source = (0, typescript_1.createSourceFile)(componentFileInfo.filePath, currentComponentContents, typescript_1.ScriptTarget.Latest, true);
        source = (0, ast_utils_1.insertImport)(tree, source, componentFileInfo.filePath, 'NgModule', '@angular/core');
        source = (0, ast_utils_1.insertImport)(tree, source, componentFileInfo.filePath, 'CommonModule', '@angular/common');
        let updatedComponentSource = source.getText();
        updatedComponentSource = `${updatedComponentSource}${getNgModuleDeclaration(componentClassName)}`;
        tree.write(componentFileInfo.filePath, updatedComponentSource);
        return;
    }
    const moduleFilePath = (0, devkit_1.joinPathFragments)(componentFileInfo.directory, `${componentNames.fileName}.module.ts`);
    tree.write(moduleFilePath, getModuleFileContent(componentClassName, componentFileInfo.fileName));
}
exports.convertComponentToScam = convertComponentToScam;
function getModuleFileContent(componentClassName, componentFileName) {
    return `import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ${componentClassName} } from './${componentFileName}';
${getNgModuleDeclaration(componentClassName)}`;
}
function getNgModuleDeclaration(componentClassName) {
    return `
@NgModule({
  imports: [CommonModule],
  declarations: [${componentClassName}],
  exports: [${componentClassName}],
})
export class ${componentClassName}Module {}`;
}
//# sourceMappingURL=convert-component-to-scam.js.map