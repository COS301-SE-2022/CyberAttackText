import { <%= className %>Loaded } from './<%= fileName %>.actions';
import { <%= className %>State, <%= className %>Entity, initial<%= className %>State, <%= propertyName %>Reducer } from './<%= fileName %>.reducer';

describe('<%= className %> Reducer', () => {
  const get<%= className %>Id = (it: <%= className %>Entity) => it.id;
  const create<%= className %> = (id: string, name = ''): <%= className %>Entity => ({
    id,
    name: name || `name-${id}`
  });

  describe('valid <%= className %> actions', () => {
    it('should return the list of known <%= className %>', () => {
      const <%= propertyName %> = [create<%= className %>('PRODUCT-AAA'), create<%= className %>('PRODUCT-zzz')];
      const action = new <%= className %>Loaded(<%= propertyName %>);
      const result: <%= className %>State = <%= propertyName %>Reducer(initial<%= className %>State, action);
      const selId: string = get<%= className %>Id(result.list[1]);

      expect(result.loaded).toBe(true);
      expect(result.list.length).toBe(2);
      expect(selId).toBe('PRODUCT-zzz');
    });
  });

  describe('unknown action', () => {
    it('should return the previous state', () => {
      const action = {} as any;
      const result = <%= propertyName %>Reducer(initial<%= className %>State, action);

      expect(result).toBe(initial<%= className %>State);
    });
  });
});
