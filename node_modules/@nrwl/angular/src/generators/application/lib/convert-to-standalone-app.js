"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertToStandaloneApp = void 0;
const devkit_1 = require("@nrwl/devkit");
const tsquery_1 = require("@phenomnomnominal/tsquery");
function convertToStandaloneApp(tree, options) {
    const pathToAppModule = (0, devkit_1.joinPathFragments)(options.appProjectRoot, 'src/app/app.module.ts');
    updateMainEntrypoint(options, tree, pathToAppModule);
    updateAppComponent(tree, options);
    if (!options.skipTests) {
        updateAppComponentSpec(tree, options);
    }
    tree.delete(pathToAppModule);
}
exports.convertToStandaloneApp = convertToStandaloneApp;
function updateMainEntrypoint(options, tree, pathToAppModule) {
    let routerModuleSetup;
    if (options.routing) {
        const appModuleContents = tree.read(pathToAppModule, 'utf-8');
        const ast = tsquery_1.tsquery.ast(appModuleContents);
        const ROUTER_MODULE_SELECTOR = 'PropertyAssignment:has(Identifier[name=imports]) CallExpression:has(PropertyAccessExpression > Identifier[name=RouterModule])';
        const nodes = (0, tsquery_1.tsquery)(ast, ROUTER_MODULE_SELECTOR, {
            visitAllChildren: true,
        });
        if (nodes.length > 0) {
            routerModuleSetup = nodes[0].getText();
        }
    }
    tree.write((0, devkit_1.joinPathFragments)(options.appProjectRoot, 'src/main.ts'), standaloneComponentMainContents(routerModuleSetup));
}
const standaloneComponentMainContents = (routerModuleSetup) => `import { enableProdMode${routerModuleSetup ? `, importProvidersFrom` : ``} } from '@angular/core';
import { bootstrapApplication } from '@angular/platform-browser';${routerModuleSetup
    ? `
import { RouterModule } from '@angular/router'`
    : ``};
import { AppComponent } from './app/app.component';
import { environment } from './environments/environment';

if (environment.production) {
  enableProdMode();
}

bootstrapApplication(AppComponent${routerModuleSetup
    ? `, {
  providers: [importProvidersFrom(${routerModuleSetup})],
}`
    : ''}).catch((err) => console.error(err));`;
function updateAppComponent(tree, options) {
    const pathToAppComponent = (0, devkit_1.joinPathFragments)(options.appProjectRoot, 'src/app/app.component.ts');
    const appComponentContents = tree.read(pathToAppComponent, 'utf-8');
    const ast = tsquery_1.tsquery.ast(appComponentContents);
    const COMPONENT_DECORATOR_SELECTOR = 'Decorator > CallExpression:has(Identifier[name=Component])  ObjectLiteralExpression';
    const nodes = (0, tsquery_1.tsquery)(ast, COMPONENT_DECORATOR_SELECTOR, {
        visitAllChildren: true,
    });
    if (nodes.length === 0) {
        throw new Error('Could not find Component decorator within app.component.ts for standalone app generation.');
    }
    const startPos = nodes[0].getStart() + 1;
    const newAppComponentContents = `import { NxWelcomeComponent } from './nx-welcome.component';${options.routing
        ? `
import { RouterModule } from '@angular/router';`
        : ''}
${appComponentContents.slice(0, startPos)}
  standalone: true,
  imports: [NxWelcomeComponent${options.routing ? ', RouterModule' : ''}],${appComponentContents.slice(startPos, -1)}`;
    tree.write(pathToAppComponent, newAppComponentContents);
}
function updateAppComponentSpec(tree, options) {
    const pathToAppComponentSpec = (0, devkit_1.joinPathFragments)(options.appProjectRoot, 'src/app/app.component.spec.ts');
    const appComponentSpecContents = tree.read(pathToAppComponentSpec, 'utf-8');
    let newAppComponentSpecContents;
    if (!options.routing) {
        newAppComponentSpecContents = appComponentSpecContents.replace('declarations', 'imports');
    }
    else {
        newAppComponentSpecContents = appComponentSpecContents
            .replace('imports: [RouterTestingModule],', 'imports: [AppComponent, NxWelcomeComponent, RouterTestingModule]')
            .replace('declarations: [AppComponent, NxWelcomeComponent]', '');
    }
    tree.write(pathToAppComponentSpec, newAppComponentSpecContents);
}
//# sourceMappingURL=convert-to-standalone-app.js.map