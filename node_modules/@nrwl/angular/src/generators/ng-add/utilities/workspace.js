"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWorkspaceCapabilities = exports.createRootKarmaConfig = exports.createWorkspaceFiles = exports.cleanupEsLintPackages = exports.updateRootEsLintConfig = exports.updatePackageJson = exports.updateRootTsConfig = exports.updateWorkspaceConfigDefaults = exports.decorateAngularCli = exports.createNxJson = exports.validateWorkspace = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const linter_1 = require("@nrwl/linter");
const workspace_1 = require("@nrwl/workspace/src/generators/workspace/workspace");
const default_base_1 = require("@nrwl/workspace/src/utilities/default-base");
const prettier_1 = require("@nrwl/workspace/src/utilities/prettier");
const typescript_1 = require("@nrwl/workspace/src/utilities/typescript");
const versions_1 = require("@nrwl/workspace/src/utils/versions");
const fs_1 = require("fs");
const package_json_1 = require("nx/src/utils/package-json");
const path_1 = require("path");
const versions_2 = require("../../../utils/versions");
const validation_logging_1 = require("./validation-logging");
function validateWorkspace(tree) {
    const errors = [];
    if (!tree.exists('package.json')) {
        errors.push('The "package.json" file could not be found.');
    }
    if (!tree.exists('angular.json')) {
        errors.push('The "angular.json" file could not be found.');
    }
    if (!errors.length) {
        return;
    }
    throw new Error(`${validation_logging_1.workspaceMigrationErrorHeading}

  - ${errors.join('\n  ')}`);
}
exports.validateWorkspace = validateWorkspace;
function createNxJson(tree, options, setWorkspaceLayoutAsNewProjectRoot = false) {
    var _a;
    const { newProjectRoot = '' } = (0, devkit_1.readJson)(tree, 'angular.json');
    const { npmScope } = options;
    (0, devkit_1.writeJson)(tree, 'nx.json', Object.assign(Object.assign({}, (npmScope ? { npmScope } : {})), { affected: {
            defaultBase: (_a = options.defaultBase) !== null && _a !== void 0 ? _a : (0, default_base_1.deduceDefaultBase)(),
        }, implicitDependencies: {
            'package.json': {
                dependencies: '*',
                devDependencies: '*',
            },
            '.eslintrc.json': '*',
        }, tasksRunnerOptions: {
            default: {
                runner: 'nx/tasks-runners/default',
                options: {
                    cacheableOperations: ['build', 'lint', 'test', 'e2e'],
                },
            },
        }, targetDefaults: {
            build: { dependsOn: ['^build'] },
        }, workspaceLayout: setWorkspaceLayoutAsNewProjectRoot
            ? { appsDir: newProjectRoot, libsDir: newProjectRoot }
            : undefined }));
}
exports.createNxJson = createNxJson;
function decorateAngularCli(tree) {
    const nrwlWorkspacePath = (0, package_json_1.readModulePackageJson)('@nrwl/workspace').path;
    const decorateCli = (0, fs_1.readFileSync)((0, path_1.join)((0, path_1.dirname)(nrwlWorkspacePath), 'src/generators/utils/decorate-angular-cli.js__tmpl__'), 'utf-8');
    tree.write('decorate-angular-cli.js', decorateCli);
    (0, devkit_1.updateJson)(tree, 'package.json', (json) => {
        if (json.scripts &&
            json.scripts.postinstall &&
            !json.scripts.postinstall.includes('decorate-angular-cli.js')) {
            // if exists, add execution of this script
            json.scripts.postinstall += ' && node ./decorate-angular-cli.js';
        }
        else {
            if (!json.scripts)
                json.scripts = {};
            // if doesn't exist, set to execute this script
            json.scripts.postinstall = 'node ./decorate-angular-cli.js';
        }
        if (json.scripts.ng) {
            json.scripts.ng = 'nx';
        }
        return json;
    });
}
exports.decorateAngularCli = decorateAngularCli;
function updateWorkspaceConfigDefaults(tree) {
    const workspaceConfig = (0, devkit_1.readWorkspaceConfiguration)(tree);
    delete workspaceConfig.newProjectRoot;
    if (workspaceConfig.cli) {
        delete workspaceConfig.defaultCollection;
    }
    (0, devkit_1.updateWorkspaceConfiguration)(tree, workspaceConfig);
}
exports.updateWorkspaceConfigDefaults = updateWorkspaceConfigDefaults;
function updateRootTsConfig(tree) {
    var _a, _b;
    var _c;
    const tsconfig = (0, devkit_1.readJson)(tree, (0, typescript_1.getRootTsConfigPathInTree)(tree));
    (_a = (_c = tsconfig.compilerOptions).paths) !== null && _a !== void 0 ? _a : (_c.paths = {});
    tsconfig.compilerOptions.baseUrl = '.';
    tsconfig.compilerOptions.rootDir = '.';
    tsconfig.exclude = Array.from(new Set([...((_b = tsconfig.exclude) !== null && _b !== void 0 ? _b : []), 'node_modules', 'tmp']));
    (0, devkit_1.writeJson)(tree, 'tsconfig.base.json', tsconfig);
    if (tree.exists('tsconfig.json')) {
        tree.delete('tsconfig.json');
    }
}
exports.updateRootTsConfig = updateRootTsConfig;
function updatePackageJson(tree) {
    (0, devkit_1.updateJson)(tree, 'package.json', (packageJson) => {
        var _a, _b, _c;
        packageJson.scripts = (_a = packageJson.scripts) !== null && _a !== void 0 ? _a : {};
        Object.keys(packageJson.scripts).forEach((script) => {
            packageJson.scripts[script] = packageJson.scripts[script]
                .replace(/^ng /, 'nx ')
                .replace(/ ng /, ' nx ');
        });
        packageJson.devDependencies = (_b = packageJson.devDependencies) !== null && _b !== void 0 ? _b : {};
        packageJson.dependencies = (_c = packageJson.dependencies) !== null && _c !== void 0 ? _c : {};
        if (!packageJson.devDependencies['@angular/cli']) {
            packageJson.devDependencies['@angular/cli'] = versions_2.angularDevkitVersion;
        }
        if (!packageJson.devDependencies['@nrwl/workspace']) {
            packageJson.devDependencies['@nrwl/workspace'] = versions_2.nxVersion;
        }
        if (!packageJson.devDependencies['nx']) {
            packageJson.devDependencies['nx'] = versions_2.nxVersion;
        }
        if (!packageJson.devDependencies['prettier']) {
            packageJson.devDependencies['prettier'] = versions_1.prettierVersion;
        }
        return packageJson;
    });
}
exports.updatePackageJson = updatePackageJson;
function updateRootEsLintConfig(tree, existingEsLintConfig, unitTestRunner) {
    var _a, _b, _c;
    if (tree.exists('.eslintrc.json')) {
        /**
         * If it still exists it means that there was no project at the root of the
         * workspace, so it was not moved. In that case, we remove the file so the
         * init generator do its work. We still receive the content of the file,
         * so we update it after the init generator has run.
         */
        tree.delete('.eslintrc.json');
    }
    (0, linter_1.lintInitGenerator)(tree, { linter: linter_1.Linter.EsLint, unitTestRunner });
    if (!existingEsLintConfig) {
        // There was no eslint config in the root, so we keep the generated one as-is.
        return;
    }
    existingEsLintConfig.ignorePatterns = ['**/*'];
    existingEsLintConfig.plugins = Array.from(new Set([...((_a = existingEsLintConfig.plugins) !== null && _a !== void 0 ? _a : []), '@nrwl/nx']));
    (_b = existingEsLintConfig.overrides) === null || _b === void 0 ? void 0 : _b.forEach((override) => {
        var _a;
        if (!((_a = override.parserOptions) === null || _a === void 0 ? void 0 : _a.project)) {
            return;
        }
        delete override.parserOptions.project;
    });
    // add the @nrwl/nx/enforce-module-boundaries rule
    existingEsLintConfig.overrides = [
        ...((_c = existingEsLintConfig.overrides) !== null && _c !== void 0 ? _c : []),
        {
            files: ['*.ts', '*.tsx', '*.js', '*.jsx'],
            rules: {
                '@nrwl/nx/enforce-module-boundaries': [
                    'error',
                    {
                        enforceBuildableLibDependency: true,
                        allow: [],
                        depConstraints: [
                            { sourceTag: '*', onlyDependOnLibsWithTags: ['*'] },
                        ],
                    },
                ],
            },
        },
    ];
    (0, devkit_1.writeJson)(tree, '.eslintrc.json', existingEsLintConfig);
}
exports.updateRootEsLintConfig = updateRootEsLintConfig;
function cleanupEsLintPackages(tree) {
    (0, devkit_1.updateJson)(tree, 'package.json', (json) => {
        var _a, _b, _c, _d;
        if ((_a = json.devDependencies) === null || _a === void 0 ? void 0 : _a['@angular-eslint/builder']) {
            delete json.devDependencies['@angular-eslint/builder'];
        }
        if ((_b = json.dependencies) === null || _b === void 0 ? void 0 : _b['@angular-eslint/builder']) {
            delete json.dependencies['@angular-eslint/builder'];
        }
        if ((_c = json.devDependencies) === null || _c === void 0 ? void 0 : _c['@angular-eslint/schematics']) {
            delete json.devDependencies['@angular-eslint/schematics'];
        }
        if ((_d = json.dependencies) === null || _d === void 0 ? void 0 : _d['@angular-eslint/schematics']) {
            delete json.dependencies['@angular-eslint/schematics'];
        }
        return json;
    });
}
exports.cleanupEsLintPackages = cleanupEsLintPackages;
function createWorkspaceFiles(tree) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        updateVsCodeRecommendedExtensions(tree);
        yield updatePrettierConfig(tree);
        (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, '../files/root'), '.', {
            tmpl: '',
            dot: '.',
            rootTsConfigPath: (0, typescript_1.getRootTsConfigPathInTree)(tree),
        });
    });
}
exports.createWorkspaceFiles = createWorkspaceFiles;
function createRootKarmaConfig(tree) {
    (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, '../files/root-karma'), '.', {
        tmpl: '',
    });
}
exports.createRootKarmaConfig = createRootKarmaConfig;
function getWorkspaceCapabilities(tree, projects) {
    var _a, _b;
    const capabilities = { eslint: false, karma: false };
    if (tree.exists('.eslintrc.json')) {
        capabilities.eslint = true;
    }
    if (tree.exists('karma.conf.js')) {
        capabilities.karma = true;
    }
    if (capabilities.eslint && capabilities.karma) {
        return capabilities;
    }
    for (const project of [...projects.apps, ...projects.libs]) {
        if (!capabilities.eslint &&
            (((_a = project.config.targets) === null || _a === void 0 ? void 0 : _a.lint) ||
                tree.exists(`${project.config.root}/.eslintrc.json`))) {
            capabilities.eslint = true;
        }
        if (!capabilities.karma &&
            (((_b = project.config.targets) === null || _b === void 0 ? void 0 : _b.test) ||
                tree.exists(`${project.config.root}/karma.conf.js`))) {
            capabilities.karma = true;
        }
        if (capabilities.eslint && capabilities.karma) {
            return capabilities;
        }
    }
    return capabilities;
}
exports.getWorkspaceCapabilities = getWorkspaceCapabilities;
function updateVsCodeRecommendedExtensions(tree) {
    const recommendations = [
        'nrwl.angular-console',
        'angular.ng-template',
        'dbaeumer.vscode-eslint',
        'esbenp.prettier-vscode',
    ];
    if (tree.exists('.vscode/extensions.json')) {
        (0, devkit_1.updateJson)(tree, '.vscode/extensions.json', (json) => {
            json.recommendations = json.recommendations || [];
            recommendations.forEach((extension) => {
                if (!json.recommendations.includes(extension)) {
                    json.recommendations.push(extension);
                }
            });
            return json;
        });
    }
    else {
        (0, devkit_1.writeJson)(tree, '.vscode/extensions.json', {
            recommendations,
        });
    }
}
function updatePrettierConfig(tree) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const existingPrettierConfig = yield (0, prettier_1.resolveUserExistingPrettierConfig)();
        if (!existingPrettierConfig) {
            (0, devkit_1.writeJson)(tree, '.prettierrc', workspace_1.DEFAULT_NRWL_PRETTIER_CONFIG);
        }
        if (!tree.exists('.prettierignore')) {
            (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, '../files/prettier'), '.', { tmpl: '', dot: '.' });
        }
    });
}
//# sourceMappingURL=workspace.js.map