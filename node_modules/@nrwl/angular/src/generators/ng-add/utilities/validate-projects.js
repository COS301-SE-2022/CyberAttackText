"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateProjects = void 0;
const chalk = require("chalk");
const validation_logging_1 = require("./validation-logging");
function validateProjects(migrators) {
    const erroredProjects = {};
    for (const migrator of migrators) {
        const result = migrator.validate();
        if (result) {
            erroredProjects[migrator.projectName] = result;
        }
    }
    if (!Object.keys(erroredProjects).length) {
        return;
    }
    throw new Error(`${validation_logging_1.workspaceMigrationErrorHeading}

${Object.entries(erroredProjects)
        .map(([project, errors]) => getProjectValidationErrorsText(project, errors))
        .join('\n\n')}`);
}
exports.validateProjects = validateProjects;
function getProjectValidationErrorsText(project, errors) {
    return `${getProjectHeading(project)}

  ${errors.map((error) => getValidationErrorText(error)).join('\n\n  ')}`;
}
function getValidationErrorText({ message, messageGroup, hint, }) {
    let lines = message
        ? [`- ${message}`, ...(hint ? [chalk.dim(chalk.italic(`  ${hint}`))] : [])]
        : [
            `- ${messageGroup.title}:`,
            '  - Errors:',
            ...messageGroup.messages.map((message) => `    - ${message}`),
            ...(hint ? [chalk.dim(chalk.italic(`  - ${hint}`))] : []),
        ];
    return lines.join('\n  ');
}
function getProjectHeading(project) {
    const line = '-'.repeat(project.length + 4);
    return chalk.bold(`${line}
  ${project}
${line}`);
}
//# sourceMappingURL=validate-projects.js.map