{
  "$schema": "http://json-schema.org/schema",
  "$id": "GeneratorAngularLibrary",
  "title": "Create a library",
  "description": "Creates an Angular library.",
  "type": "object",
  "cli": "nx",
  "properties": {
    "name": {
      "type": "string",
      "description": "The name of the library.",
      "$default": {
        "$source": "argv",
        "index": 0
      },
      "x-prompt": "What name would you like to use for the library?",
      "pattern": "^[a-zA-Z].*$"
    },
    "directory": {
      "type": "string",
      "description": "A directory where the library is placed."
    },
    "publishable": {
      "type": "boolean",
      "default": false,
      "description": "Generate a publishable library."
    },
    "buildable": {
      "type": "boolean",
      "default": false,
      "description": "Generate a buildable library."
    },
    "prefix": {
      "type": "string",
      "format": "html-selector",
      "description": "The prefix to apply to generated selectors.",
      "alias": "p"
    },
    "skipFormat": {
      "description": "Skip formatting files.",
      "type": "boolean",
      "default": false
    },
    "simpleModuleName": {
      "description": "Keep the module name simple (when using `--directory`).",
      "type": "boolean",
      "default": false
    },
    "addModuleSpec": {
      "description": "Add a module spec file.",
      "type": "boolean",
      "default": false
    },
    "skipPackageJson": {
      "type": "boolean",
      "default": false,
      "description": "Do not add dependencies to `package.json`."
    },
    "skipPostInstall": {
      "type": "boolean",
      "default": false,
      "description": "Do not add or append `ngcc` to the `postinstall` script in `package.json`."
    },
    "skipTsConfig": {
      "type": "boolean",
      "default": false,
      "description": "Do not update `tsconfig.json` for development experience."
    },
    "routing": {
      "type": "boolean",
      "default": false,
      "description": "Add router configuration. See `lazy` for more information."
    },
    "lazy": {
      "type": "boolean",
      "default": false,
      "description": "Add `RouterModule.forChild` when set to true, and a simple array of routes when set to false."
    },
    "parentModule": {
      "type": "string",
      "description": "Update the router configuration of the parent module using `loadChildren` or `children`, depending on what `lazy` is set to.",
      "alias": "parent"
    },
    "tags": {
      "type": "string",
      "description": "Add tags to the library (used for linting)."
    },
    "unitTestRunner": {
      "type": "string",
      "enum": ["karma", "jest", "none"],
      "description": "Test runner to use for unit tests.",
      "default": "jest"
    },
    "importPath": {
      "type": "string",
      "description": "The library name used to import it, like `@myorg/my-awesome-lib`. Must be a valid npm name."
    },
    "strict": {
      "type": "boolean",
      "description": "Create a library with stricter type checking and build optimization options.",
      "default": true
    },
    "linter": {
      "description": "The tool to use for running lint checks.",
      "type": "string",
      "enum": ["eslint", "none"],
      "default": "eslint"
    },
    "standaloneConfig": {
      "description": "Split the project configuration into `<projectRoot>/project.json` rather than including it inside `workspace.json`.",
      "type": "boolean"
    },
    "compilationMode": {
      "description": "Specifies the compilation mode to use. If not specified, it will default to `partial` for publishable libraries and to `full` for buildable libraries. The `full` value can not be used for publishable libraries.",
      "type": "string",
      "enum": ["full", "partial"]
    },
    "setParserOptionsProject": {
      "type": "boolean",
      "description": "Whether or not to configure the ESLint `parserOptions.project` option. We do not do this by default for lint performance reasons.",
      "default": false
    },
    "addTailwind": {
      "type": "boolean",
      "description": "Whether to configure Tailwind CSS for the application. It can only be used with buildable and publishable libraries. Non-buildable libraries will use the application's Tailwind configuration.",
      "default": false
    },
    "skipModule": {
      "type": "boolean",
      "description": "Whether to skip the creation of a default module when generating the library.",
      "default": false
    },
    "standalone": {
      "type": "boolean",
      "description": "Generate a library that uses a standalone component instead of a module as the entry point.",
      "default": false
    }
  },
  "additionalProperties": false,
  "required": ["name"]
}
