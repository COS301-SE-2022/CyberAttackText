"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addStandaloneComponent = void 0;
const tslib_1 = require("tslib");
const component_1 = require("../../component/component");
const path_1 = require("nx/src/utils/path");
const devkit_1 = require("@nrwl/devkit");
const add_load_children_1 = require("./add-load-children");
const add_children_1 = require("./add-children");
function addStandaloneComponent(tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        yield (0, component_1.default)(tree, {
            name: options.name,
            standalone: true,
            export: true,
            project: options.name,
        });
        if (options.routing) {
            const pathToRoutes = (0, path_1.joinPathFragments)(options.projectRoot, 'src/lib/routes.ts');
            const routesContents = `import { Route } from '@angular/router';
    import { ${options.standaloneComponentName} } from './${(0, path_1.joinPathFragments)(options.fileName, `${options.fileName}.component`)}';
    
        export const ${(0, devkit_1.names)(options.name).className.toUpperCase()}_ROUTES: Route[] = [
          {path: '', component: ${options.standaloneComponentName}}
        ];`;
            tree.write(pathToRoutes, routesContents);
            const pathToEntryFile = (0, path_1.joinPathFragments)(options.projectRoot, 'src', `${options.entryFile}.ts`);
            const entryFileContents = tree.read(pathToEntryFile, 'utf-8');
            tree.write(pathToEntryFile, `${entryFileContents}
        export * from './lib/routes'`);
            if (options.parentModule) {
                if (options.lazy) {
                    (0, add_load_children_1.addLoadChildren)(tree, options);
                }
                else {
                    (0, add_children_1.addChildren)(tree, options);
                }
            }
        }
    });
}
exports.addStandaloneComponent = addStandaloneComponent;
//# sourceMappingURL=add-standalone-component.js.map