{"version":3,"file":"nrwl-angular-mf.mjs","sources":["../../mf/mf.ts","../../mf/nrwl-angular-mf.ts"],"sourcesContent":["export type ResolveRemoteUrlFunction = (\n  remoteName: string\n) => string | Promise<string>;\n\ndeclare const __webpack_init_sharing__: (scope: 'default') => Promise<void>;\ndeclare const __webpack_share_scopes__: { default: unknown };\n\nlet resolveRemoteUrl: ResolveRemoteUrlFunction;\nexport function setRemoteUrlResolver(\n  _resolveRemoteUrl: ResolveRemoteUrlFunction\n) {\n  resolveRemoteUrl = _resolveRemoteUrl;\n}\n\nlet remoteUrlDefinitions: Record<string, string>;\nexport function setRemoteDefinitions(definitions: Record<string, string>) {\n  remoteUrlDefinitions = definitions;\n}\n\nlet remoteModuleMap = new Map<string, unknown>();\nlet remoteContainerMap = new Map<string, unknown>();\nexport async function loadRemoteModule(remoteName: string, moduleName: string) {\n  const remoteModuleKey = `${remoteName}:${moduleName}`;\n  if (remoteModuleMap.has(remoteModuleKey)) {\n    return remoteModuleMap.get(remoteModuleKey);\n  }\n\n  const container = remoteContainerMap.has(remoteName)\n    ? remoteContainerMap.get(remoteName)\n    : await loadRemoteContainer(remoteName);\n\n  const factory = await container.get(moduleName);\n  const Module = factory();\n\n  remoteModuleMap.set(remoteModuleKey, Module);\n\n  return Module;\n}\n\nfunction loadModule(url: string) {\n  return import(/* webpackIgnore:true */ url);\n}\n\nlet initialSharingScopeCreated = false;\nasync function loadRemoteContainer(remoteName: string) {\n  if (!resolveRemoteUrl && !remoteUrlDefinitions) {\n    throw new Error(\n      'Call setRemoteDefinitions or setRemoteUrlResolver to allow Dynamic Federation to find the remote apps correctly.'\n    );\n  }\n\n  if (!initialSharingScopeCreated) {\n    initialSharingScopeCreated = true;\n    await __webpack_init_sharing__('default');\n  }\n\n  const remoteUrl = remoteUrlDefinitions\n    ? remoteUrlDefinitions[remoteName]\n    : await resolveRemoteUrl(remoteName);\n\n  const containerUrl = `${remoteUrl}${\n    remoteUrl.endsWith('/') ? '' : '/'\n  }remoteEntry.mjs`;\n\n  const container = await loadModule(containerUrl);\n  await container.init(__webpack_share_scopes__.default);\n\n  remoteContainerMap.set(remoteName, container);\n  return container;\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;AAOA,IAAI,gBAA0C,CAAC;AACzC,SAAU,oBAAoB,CAClC,iBAA2C,EAAA;IAE3C,gBAAgB,GAAG,iBAAiB,CAAC;AACvC,CAAC;AAED,IAAI,oBAA4C,CAAC;AAC3C,SAAU,oBAAoB,CAAC,WAAmC,EAAA;IACtE,oBAAoB,GAAG,WAAW,CAAC;AACrC,CAAC;AAED,IAAI,eAAe,GAAG,IAAI,GAAG,EAAmB,CAAC;AACjD,IAAI,kBAAkB,GAAG,IAAI,GAAG,EAAmB,CAAC;AAC9B,SAAA,gBAAgB,CAAC,UAAkB,EAAE,UAAkB,EAAA;;AAC3E,QAAA,MAAM,eAAe,GAAG,CAAA,EAAG,UAAU,CAAI,CAAA,EAAA,UAAU,EAAE,CAAC;AACtD,QAAA,IAAI,eAAe,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE;AACxC,YAAA,OAAO,eAAe,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;AAC7C,SAAA;AAED,QAAA,MAAM,SAAS,GAAG,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC;AAClD,cAAE,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC;AACpC,cAAE,MAAM,mBAAmB,CAAC,UAAU,CAAC,CAAC;QAE1C,MAAM,OAAO,GAAG,MAAM,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;AAChD,QAAA,MAAM,MAAM,GAAG,OAAO,EAAE,CAAC;AAEzB,QAAA,eAAe,CAAC,GAAG,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;AAE7C,QAAA,OAAO,MAAM,CAAC;KACf,CAAA,CAAA;AAAA,CAAA;AAED,SAAS,UAAU,CAAC,GAAW,EAAA;AAC7B,IAAA,OAAO,gCAAgC,GAAG,CAAC,CAAC;AAC9C,CAAC;AAED,IAAI,0BAA0B,GAAG,KAAK,CAAC;AACvC,SAAe,mBAAmB,CAAC,UAAkB,EAAA;;AACnD,QAAA,IAAI,CAAC,gBAAgB,IAAI,CAAC,oBAAoB,EAAE;AAC9C,YAAA,MAAM,IAAI,KAAK,CACb,kHAAkH,CACnH,CAAC;AACH,SAAA;QAED,IAAI,CAAC,0BAA0B,EAAE;YAC/B,0BAA0B,GAAG,IAAI,CAAC;AAClC,YAAA,MAAM,wBAAwB,CAAC,SAAS,CAAC,CAAC;AAC3C,SAAA;QAED,MAAM,SAAS,GAAG,oBAAoB;AACpC,cAAE,oBAAoB,CAAC,UAAU,CAAC;AAClC,cAAE,MAAM,gBAAgB,CAAC,UAAU,CAAC,CAAC;QAEvC,MAAM,YAAY,GAAG,CAAG,EAAA,SAAS,GAC/B,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,GACjC,iBAAiB,CAAC;AAElB,QAAA,MAAM,SAAS,GAAG,MAAM,UAAU,CAAC,YAAY,CAAC,CAAC;QACjD,MAAM,SAAS,CAAC,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;AAEvD,QAAA,kBAAkB,CAAC,GAAG,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;AAC9C,QAAA,OAAO,SAAS,CAAC;KAClB,CAAA,CAAA;AAAA;;ACrED;;AAEG;;;;"}